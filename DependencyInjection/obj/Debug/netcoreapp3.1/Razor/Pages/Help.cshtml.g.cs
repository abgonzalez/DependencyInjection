#pragma checksum "C:\Personal\AspNetCore\DependencyInjection\DependencyInjection\DependencyInjection\Pages\Help.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "12590f988c245bbb03a6b911e99db156e4f1a9dc"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(ExploreCalifornia.Pages.Pages_Help), @"mvc.1.0.razor-page", @"/Pages/Help.cshtml")]
namespace ExploreCalifornia.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Personal\AspNetCore\DependencyInjection\DependencyInjection\DependencyInjection\Pages\_ViewImports.cshtml"
using ExploreCalifornia;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"12590f988c245bbb03a6b911e99db156e4f1a9dc", @"/Pages/Help.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"45885f8d74bee857c6835e80955e4be6fd544225", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Help : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Personal\AspNetCore\DependencyInjection\DependencyInjection\DependencyInjection\Pages\Help.cshtml"
  
    ViewData["Title"] = "Dependency Injecion explanation";

#line default
#line hidden
#nullable disable
            WriteLiteral("<h1>");
#nullable restore
#line 6 "C:\Personal\AspNetCore\DependencyInjection\DependencyInjection\DependencyInjection\Pages\Help.cshtml"
Write(ViewData["Title"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</h1>

<p>
    <ul class=""list-group"">
        <li class=""list-group-item"">
            <strong>Transient</strong> objects are always different; a new instance is provided to every controller and every service.
        </li>
        <li class=""list-group-item"">
            <strong>Scoped</strong> objects are the same within a request, but different across different requests.For example, in a web application it creates 1 instance per each http request but uses the same instance in the other calls within that same web request..
        </li>
        <li class=""list-group-item"">
            <strong>Singleton</strong> objects are the same for every object and every request
        </li>
    </ul>
    Further details in this link <a href=""https://stackoverflow.com/questions/38138100/addtransient-addscoped-and-addsingleton-services-differences"">https://stackoverflow.com/questions/38138100/addtransient-addscoped-and-addsingleton-services-differences</a>
</p>
<p>
    Observe which of the OperationId ");
            WriteLiteral(@"values varies within a request, and between requests.

    Transient objects are always different; a new instance is provided to every controller and every service.

    Scoped objects are the same within a request, but different across different requests

    Singleton objects are the same for every object and every request (regardless of whether an instance is provided in ConfigureServices)
</p>
<h3> Application</h3>
<ul class=""list-group"">
    <li class=""list-group-item"">
        <strong>Transient</strong>
        <br />
        <ul>
            <li>since they are created every time they will use <strong>more memory</strong> &amp; Resources and can have the negative impact on performance</li>
            <li>use this for the <strong>lightweight</strong> service with little or <strong>no state</strong>.</li>
        </ul>
    </li>
    <li class=""list-group-item"">
        <strong>Scoped</strong>
        <br />
        <ul>
            <li>Better option when you want to maintain state w");
            WriteLiteral(@"ithin a request.</li>
        </ul>
    </li>
    <li class=""list-group-item"">
        <strong>Singleton</strong>
        <br />
        <ul>
            <li>memory leaks in these services will build up over time.</li>
            <li>also memory efficient as they are created once reused everywhere.</li>
        </ul>
        <span>
            Use Singletons where you need to maintain application wide state. Application configuration or parameters, Logging Service, caching of data is some of the examples where you can use singletons
        </span>
    </li>

    <li class=""list-group-item"">
        <strong>Injecting service with different lifetimes into another</strong>
        <br />
        <ol>
            <li><strong>Never inject Scoped &amp; Transient services into Singleton service.</strong> ( This effectively converts the transient or scoped service into the singleton.)</li>
            <li><strong>Never inject Transient services into scoped service</strong> ( This converts the tr");
            WriteLiteral("ansient service into the scoped. )</li>\r\n        </ol>\r\n    </li>\r\n\r\n</ul>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<HelpModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<HelpModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<HelpModel>)PageContext?.ViewData;
        public HelpModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
